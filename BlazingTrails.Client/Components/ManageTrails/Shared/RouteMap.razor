@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@implements IDisposable

<div class="map-wrapper">
    @if (!isReadOnly)
    {
        <div class="controls">
            <button @onclick="DeleteLastWaypoint" class="btn btn-secondary" title="Delete last waypoint" type="button">
                <i class="fa fa-trash"></i>
                Remove Last Waypoint
            </button>
        </div>
    }
    <div style="height: @(Height); width:@(Width);" @ref="_map"></div>
</div>

@code {
    private ElementReference _map;
    private IJSObjectReference? _routeMapModule;
    private DotNetObjectReference<RouteMap>? _routeMapReference;

    [Parameter] public List<LatLongDto> Waypoints { get; set; } = new List<LatLongDto>();
    [Parameter] public EventCallback<LatLongDto> OnWaypointAdded { get; set; }
    [Parameter] public EventCallback<LatLongDto> OnWaypointDeleted { get; set; }
    [Parameter] public bool isReadOnly { get; set; }
    [Parameter] public string Height { get; set; } = "500px";
    [Parameter] public string Width { get; set; } = "1000px";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _routeMapModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/RouteMap.js");
            _routeMapReference = DotNetObjectReference.Create(this);
            await _routeMapModule.InvokeVoidAsync("initialize", _map, _routeMapReference, Waypoints, isReadOnly);
        }
    }

    public async Task DeleteLastWaypoint()
    {
        if (_routeMapModule is not null)
        {
            var waypoint = await _routeMapModule.InvokeAsync<LatLongDto>(nameof(DeleteLastWaypoint), _map, _routeMapReference);
            await OnWaypointDeleted.InvokeAsync(waypoint);
        }
    }

    [JSInvokable]
    public async Task WaypointAdded(decimal latitude, decimal longitude)
        => await OnWaypointAdded.InvokeAsync(new LatLongDto(latitude, longitude));

    void IDisposable.Dispose()
    => _routeMapReference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_routeMapModule is not null)
        {
            await _routeMapModule.DisposeAsync();
        }
    }
}
