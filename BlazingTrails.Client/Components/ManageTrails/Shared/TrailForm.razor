<EditForm EditContext="editContext" OnValidSubmit="SubmitForm">
    <FormSection Title="Basic Details" HelpText="This information is used to identify the trail and can be searched to help hikers find it.">
        <FormFieldSet width="col-6">
            <label for="trailName" class="font-weight-bold text-secondary">Name</label>
            <InputText @bind-Value="trail.Name" class="form-control" id="trailName" />
            <ValidationMessage For="@(() => trail.Name)" />
        </FormFieldSet>

        <FormFieldSet width="col">
            <label for="trailDescription" class="font-weight-bold text-secondary">Description</label>
            <InputTextArea @bind-Value="trail.Description" rows="6" class="form-control" id="trailDescription" />
            <ValidationMessage For="@(() => trail.Description)" />
        </FormFieldSet>

        <FormFieldSet width="col-6">
            <label for="trailLocation" class="font-weight-bold text-secondary">Location</label>
            <InputText @bind-Value="trail.Location" class="form-control" id="trailLocation" />
            <ValidationMessage For="@(() => trail.Location)" />
        </FormFieldSet>

        <FormFieldSet width="col-3">
            <label for="trailLength" class="font-weight-bold text-secondary">Length (km)</label>
            <InputNumber @bind-Value="trail.Length" class="form-control" id="trailLength" />
            <ValidationMessage For="@(() => trail.Length)" />
        </FormFieldSet>

        <FormFieldSet width="col-5">
            <label for="trailTime" class="font-weight-bold text-secondary">Time</label>
            <InputTime @bind-Value="trail.TimeInMinutes" id="trailTime" />
            <ValidationMessage For="@(() => trail.TimeInMinutes)" />
        </FormFieldSet>

        @if (string.IsNullOrWhiteSpace(trail.image))
        {
            <InputFile OnChange="LoadTrailImage" class="form-control mt-3" id="trailImage" accept=".png,.jpg,.jpeg" />
        }
        else
        {
            <div class="card bg-dark text-white mt-3">
                <img src="/Images/@trail.image" />
                <div class="card-img-overlay">
                    <button class="btn btn-primary btn-sm" @onclick="RemoveTrailImage">Remove</button>
                </div>
            </div>
        }
    </FormSection>

    <FormSection Title="Route" HelpText="Route instructions are a guide for the trail. This helpshikers new to the trail stay on track.">
        <InputRouteMap @bind-Value="trail.Waypoints" />
        <ValidationMessage For="@(() => trail.Waypoints)" />
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@ResetForm">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
    <FluentValidationValidator />
</EditForm>

@code {
    [Parameter]
    public TrailDto? oldTrail { get; set; }

    private TrailDto trail = new();
    private EditContext editContext = default!;
    private IBrowserFile? trailImg;

    [Parameter, EditorRequired]
    public Func<TrailDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;

    protected override void OnParametersSet()
    {
        editContext = new EditContext(trail);
        editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

        if (oldTrail is not null)
        {
            trail.Id = oldTrail.Id;
            trail.Name = oldTrail.Name;
            trail.Description = oldTrail.Description;
            trail.Location = oldTrail.Location;
            trail.image = oldTrail.image;
            trail.ImageAction = ImageAction.None;
            trail.Length = oldTrail.Length;
            trail.TimeInMinutes = oldTrail.TimeInMinutes;
            trail.Waypoints.Clear();
            trail.Waypoints.AddRange(oldTrail.Waypoints.Select(wp => new WaypointDto(wp.Latitude, wp.Longitude)));
        }
    }

    private async Task SubmitForm() =>
        await OnSubmit(trail, trailImg);

    private void LoadTrailImage(InputFileChangeEventArgs args)
    {
        trailImg = args.File;
        trail.ImageAction = ImageAction.Add;
    }

    private void RemoveTrailImage()
    {
        trail.image = null;
        trail.ImageAction = ImageAction.Remove;
    }

    public void ResetForm()
    {
        trail = new TrailDto();
        editContext = new EditContext(trail);
        editContext.SetFieldCssClassProvider(new FieldCssClassProvider());
        trailImg = null;
    }
}
